{"version":3,"sources":["assets/notask.jpg","components/TaskInput/TaskInput.js","components/TaskView/TaskView.js","components/TaskItem/TaskItem.js","components/TaskIMG/TaskIMG.js","components/TodoList/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TaskInput","state","title","changeHandler","event","setState","target","value","submitHandler","preventDefault","props","add","onSubmit","this","className","onChange","type","placeholder","Component","TaskView","children","TaskItem","onClick","update","stt","delete","class","TaskIMG","src","NoTask","width","TodoList","todo","addItemHandler","inputTitle","newTask","id","Date","now","done","newTodo","deleteHandler","newState","filter","updateHandler","indexOf","length","map","item","index","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAOC,QAAU,IAA0B,oC,kRCEtBC,G,uNACjBC,MAAM,CACFC,MAAM,I,EAEVC,cAAgB,SAAAC,GACZ,EAAKC,SAAS,CAACH,MAAME,EAAME,OAAOC,S,EAEtCC,cAAgB,SAAAJ,GACZA,EAAMK,iBACN,EAAKC,MAAMC,IAAI,EAAKV,MAAMC,OAC1B,EAAKD,MAAMC,MAAQ,I,wEAGnB,OACA,0BAAMU,SAAWC,KAAKL,cAAgBM,UAAU,oBAC5C,2BACCC,SAAYF,KAAKV,cACjBI,MAAOM,KAAKZ,MAAMC,MAClBc,KAAK,OACLF,UAAU,eACVG,YAAY,gBACb,yBAAKH,UAAU,mBAAf,Y,GArB2BI,cCIxBC,G,MAJE,SAACT,GACd,OAAO,6BAAMA,EAAMU,YCMRC,G,MAPE,SAACX,GACd,OAAO,yBAAKI,UAAU,aAAaQ,QAASZ,EAAMa,QAC9C,2BAAIb,EAAMc,IAAV,MAAkBd,EAAMR,OACxB,4BAAQY,UAAU,iBAAkBQ,QAASZ,EAAMe,QAAQ,uBAAGC,MAAM,qB,gBCK7DC,EARC,WACZ,OACI,6BACI,yBAAKC,IAAKC,IAAQC,MAAM,UCEfC,E,2MACjB9B,MAAQ,CACJ+B,KAAK,I,EAETC,eAAiB,SAAAC,GACb,IAAMC,EAAU,CAACC,GAAGC,KAAKC,MAAMpC,MAAMgC,EAAWK,MAAK,GAC/CC,EAAO,sBAAO,EAAKvC,MAAM+B,MAAlB,CAAuBG,IACpC,EAAK9B,SAAS,CAAC2B,KAAKQ,K,EAExBC,cAAgB,SAAAL,GACZ,IAAMM,EAAW,EAAKzC,MAAM+B,KAAKW,OAAO,SAAAX,GACpC,OAAOA,EAAKI,KAAOA,IAEvB,EAAK/B,SAAS,CAAC2B,KAAKU,K,EAExBE,cAAgB,SAAAR,GACI,EAAKnC,MAAM+B,KACCa,QAAQ,SAACb,GACjC,OAAOA,EAAKI,KAAOA,K,wEAIjB,IAAD,OACL,OACI,yBAAKtB,UAAU,aACX,0CACA,kBAAC,EAAD,CAAWH,IAAKE,KAAKoB,iBACrB,kBAAC,EAAD,KACKpB,KAAKZ,MAAM+B,KAAKc,OAAS,EAAIjC,KAAKZ,MAAM+B,KAAKe,IAAI,SAACC,EAAKC,GACpD,OAAO,kBAAC,EAAD,CAAUb,GAAIY,EAAKZ,GAC1BZ,IAAKyB,EAAM,EAAGV,KAAMS,EAAKT,KACzBrC,MAAO8C,EAAK9C,MACZuB,OAAQ,kBAAM,EAAKgB,cAAcO,EAAKZ,KACtCb,OAAQ,kBAAM,EAAKqB,cAAcI,EAAKZ,SAErC,kBAAC,EAAD,Y,GAnCalB,aCKvBgC,MARf,WACE,OACE,yBAAKpC,UAAU,OACb,kBAAC,EAAD,QCKcqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.32dd0b02.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/notask.dcffa177.jpg\";","import React, { Component } from 'react'\r\nimport \"../TaskInput/TaskInput.css\"\r\nexport default class TaskInput extends Component {\r\n    state={\r\n        title:[]\r\n    }\r\n    changeHandler = event =>{\r\n        this.setState({title:event.target.value});\r\n    }\r\n    submitHandler = event =>{\r\n        event.preventDefault();\r\n        this.props.add(this.state.title);\r\n        this.state.title = \"\";\r\n    }\r\n    render() {\r\n        return (\r\n        <form onSubmit ={this.submitHandler}  className=\"input-group mb-3\">\r\n            <input \r\n             onChange = {this.changeHandler}\r\n             value={this.state.title}\r\n             type=\"text\" \r\n             className=\"form-control\" \r\n             placeholder=\"Add here...\"/>\r\n            <div className=\"btn btn-primary\">Add</div>\r\n        </form>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\nimport \"../TaskView/TaskView.css\"\r\nconst TaskView = (props) => {\r\n    return <div>{props.children}</div>\r\n}\r\n\r\nexport default TaskView;\r\n","import React from 'react'\r\nimport \"../TaskItem/TaskItem.css\"\r\nconst TaskItem = (props) => {\r\n    return <div className=\"item-class\" onClick={props.update}>\r\n        <p>{props.stt} . {props.title}</p>\r\n        <button className=\"btn btn-danger\"  onClick={props.delete}><i class=\"fas fa-trash\"></i></button>\r\n    </div>\r\n}\r\n\r\nexport default TaskItem;\r\n","import React from 'react'\r\nimport NoTask from '../../assets/notask.jpg'\r\nconst TaskIMG = () => {\r\n    return (\r\n        <div>\r\n            <img src={NoTask} width=\"50%\"></img>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TaskIMG\r\n","import React, { Component } from 'react'\r\nimport \"../TodoList/TodoCss.css\"\r\nimport TaskInput from '../TaskInput/TaskInput';\r\nimport TaskView from '../TaskView/TaskView';\r\nimport TaskItem from '../TaskItem/TaskItem';\r\nimport TaskIMG from '../TaskIMG/TaskIMG';\r\n\r\nexport default class TodoList extends Component {\r\n    state = {\r\n        todo:[]\r\n    }\r\n    addItemHandler = inputTitle =>{\r\n        const newTask = {id:Date.now(),title:inputTitle,done:false};\r\n        const newTodo = [...this.state.todo,newTask];\r\n        this.setState({todo:newTodo});\r\n    };\r\n    deleteHandler = id => {\r\n        const newState = this.state.todo.filter(todo=>{\r\n            return todo.id !== id;\r\n        })\r\n        this.setState({todo:newState});\r\n    };\r\n    updateHandler = id => {\r\n        const newTodo = this.state.todo;\r\n        const IndexOfTask = newTodo.indexOf((todo)=>{\r\n            return todo.id === id;\r\n        })\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <h1>TO DO LIST</h1>\r\n                <TaskInput add={this.addItemHandler}></TaskInput>\r\n                <TaskView>\r\n                    {this.state.todo.length > 0 ? this.state.todo.map((item,index)=>{\r\n                        return <TaskItem id={item.id} \r\n                        stt={index+1} done={item.done} \r\n                        title={item.title} \r\n                        delete={() => this.deleteHandler(item.id)}\r\n                        update={() => this.updateHandler(item.id)}>\r\n                        </TaskItem>\r\n                    }) : <TaskIMG></TaskIMG>}\r\n                </TaskView>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList></TodoList>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}